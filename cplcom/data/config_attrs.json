{
    "cplcom.app.CPLComApp": {
        "inspect": [
            "Enables GUI inspection. If True, it is activated by hitting ctrl-e in",
            "the GUI.",
            ""
        ]
    },
    "cplcom.moa.app.ExperimentApp": {
        "inspect": [
            "Enables GUI inspection. If True, it is activated by hitting ctrl-e in",
            "the GUI.",
            ""
        ]
    },
    "cplcom.moa.device.barst_server.Server": {
        "server_path": [
            "The full path to the Barst executable. Could be empty if the server",
            "is already started, on remote computer, or if it's in the typical",
            "`Program Files` path or came installed with the wheel. If the server is not",
            "running, this executable is needed to launch the server.",
            "",
            "Defaults to `''`.",
            ""
        ],
        "server_pipe": [
            "The full path to the pipe name (to be) used by the server. Examples are",
            "``\\remote_name\\pipe\\pipe_name``, where ``remote_name`` is the name of",
            "the remote computer, or a period (`.`) if the server is local, and",
            "``pipe_name`` is the name of the pipe used to create the server.",
            "",
            "Defaults to `''`.",
            ""
        ]
    },
    "cplcom.moa.device.ffplayer.FFPyPlayerAudioDevice": {
        "filename": [
            "The full filename to the audio file.",
            "    ",
            ""
        ]
    },
    "cplcom.moa.device.ffplayer.FFPyPlayerDevice": {
        "filename": [
            "The full filename to the video file or video stream.",
            "    ",
            ""
        ],
        "output_img_fmt": [
            "The image pixel format from :attr:`ffpyplayer.tools.pix_fmts` that is to",
            "be used for the images output to us by the player. Defaults to `''` and",
            "must be set.",
            ""
        ]
    },
    "cplcom.moa.device.ffplayer.FFPyWriterDevice": {
        "filename": [
            "The filename of the video to create.",
            "    ",
            ""
        ],
        "ofmt": [
            "The pixel format from :attr:`ffpyplayer.tools.pix_fmts` in which",
            "the images will be written to disk. If not empty and different than",
            ":attr:`ifmt`, the input format, the images will be internally converted to",
            "this format before writing to disk.",
            ""
        ]
    },
    "cplcom.moa.device.ftdi.FTDIADCDevice": {
        "chan1_active": [
            "Indicates whether channel 1 should be active and read and send back",
            "data. Defaults to ``True``.",
            ""
        ],
        "chan2_active": [
            "Indicates whether channel 2 should be active and read and send back",
            "data. Defaults to ``False``.",
            ""
        ],
        "clock_bit": [
            "The pin to which the clock line of the ADC device is connected at the",
            "FTDI channel. Typically between 0 - 7. Defaults to 0.",
            ""
        ],
        "data_width": [
            "The bit depth of each data point read by the ADC device. Acceptable",
            "values are either 16, or 24. Defaults to 24.",
            ""
        ],
        "lowest_bit": [
            "Defines which pins on the FTDI USB bus are data pins. The data pins are",
            "connected to the FTDI bus starting from pin number :attr:`lowest_bit` until",
            ":attr:`lowest_bit` + :attr:`num_bits`. Defaults to 0.",
            ""
        ],
        "num_bits": [
            "Indicates the number of pins on the FTDI bus that are connected to the",
            "ADC data port. Range is [2, 8]. See :attr:`lowest_bit`.",
            "Defaults to 2.",
            ""
        ],
        "sampling_rate": [
            "The requested sampling rate used by the ADC device for each channel.",
            "The value controls both channels. The available sampling rates is a",
            "function of all the other device options.",
            "",
            "Initially one sets it to the desired value. Before becoming activated it's",
            "automatically updated to the actual sampling rate using the closest found",
            "rate.",
            "",
            "Defaults to 1000.",
            ""
        ]
    },
    "cplcom.moa.device.ftdi.FTDIDevChannel": {
        "ftdi_desc": [
            "The description of the FTDI hardware board. This a name written to the",
            "hardware device.",
            "",
            ":attr:`ftdi_serial` or :attr:`ftdi_desc` are used to locate the correct",
            "board to open. An example is `'Alder Board'` for the Alder board.",
            ""
        ],
        "ftdi_serial": [
            "The serial number of the FTDI hardware board. Can be empty if",
            ":attr:`ftdi_desc` is provided.",
            ""
        ]
    },
    "cplcom.moa.device.ftdi.FTDISerializerDevice": {
        "clock_bit": [
            "The pin on the FTDI board to which the serial device's clock bit is",
            "connected.",
            "",
            "Defaults to zero.",
            ""
        ],
        "clock_size": [
            "The hardware clock width used to clock out data. Defaults to 20.",
            "    ",
            ""
        ],
        "data_bit": [
            "The pin on the FTDI board to which the serial device's data bit is",
            "connected.",
            "",
            "Defaults to zero.",
            ""
        ],
        "latch_bit": [
            "The pin on the FTDI board to which the serial device's latch bit is",
            "connected.",
            "",
            "Defaults to zero.",
            ""
        ],
        "num_boards": [
            "The number of serial boards connected in series to the FTDI device.",
            "",
            "Each board is a 8-channel port. Defaults to 1.",
            ""
        ],
        "output": [
            "Whether the serial device is a output or input device. If input a",
            ":class:`pybarst.ftdi.switch.FTDISerializerIn` will be used, otherwise a",
            ":class:`pybarst.ftdi.switch.FTDISerializerOut` will be used.",
            ""
        ]
    },
    "cplcom.moa.device.mcdaq.MCDAQDevice": {
        "SAS_chan": [
            "The channel number of the Switch & Sense 8/8 as configured in InstaCal.",
            "",
            "Defaults to zero.",
            ""
        ]
    },
    "cplcom.moa.device.mfc.MFC": {
        "mfc_id": [
            "The MFC assigned decimal number used to communicate with that MFC.",
            "    ",
            ""
        ],
        "port_name": [
            "The COM port name of the MFC, e.g. COM3.",
            "    ",
            ""
        ]
    },
    "cplcom.moa.device.rtv.RTVChan": {
        "output_img_fmt": [
            "The desired output image format that the rtv device should send us.",
            "It can be one of `'rgb16', 'gray', 'rgb15', 'rgb24', 'rgb32'`.",
            "",
            "Defaults to `'gray'`.",
            ""
        ],
        "output_video_fmt": [
            "The desired output image size that the rtv device should send us.",
            "It can be one of",
            "`'full_NTSC', 'full_PAL', 'CIF_NTSC', 'CIF_PAL', 'QCIF_NTSC', 'QCIF_PAL'`",
            "and its corresponding size is listed in :attr:`img_sizes`.",
            ""
        ],
        "port": [
            "The port number on the RTV card of camera to use.",
            "    ",
            ""
        ]
    },
    "cplcom.player.FFmpegPlayer": {
        "cls": [],
        "dshow_opt": [
            "The camera options associated with :attr:`dshow_true_filename` when",
            "dshow is used.",
            ""
        ],
        "dshow_true_filename": [
            "The real and complete filename of the direct show (webcam) device.",
            "    ",
            ""
        ],
        "file_fmt": [
            "The format used to play the video. Can be empty or a format e.g.",
            "``dshow`` for webcams.",
            ""
        ],
        "icodec": [
            "The codec used to open the video stream with.",
            "    ",
            ""
        ],
        "metadata_play": [],
        "metadata_play_used": [],
        "metadata_record": [],
        "play_filename": [
            "The filename of the media being played. Can be e.g. a url etc.",
            "    ",
            ""
        ],
        "record_directory": [],
        "record_fname": [],
        "record_fname_count": []
    },
    "cplcom.player.PTGrayPlayer": {
        "cam_config_opts": [
            "The configuration options used to configure the camera after opening.",
            "    ",
            ""
        ],
        "cls": [],
        "ip": [
            "The ip address of the camera to open. Either :attr:`ip` or",
            ":attr:`serial` must be provided.",
            ""
        ],
        "metadata_play": [],
        "metadata_play_used": [],
        "metadata_record": [],
        "record_directory": [],
        "record_fname": [],
        "record_fname_count": [],
        "serial": [
            "The serial number of the camera to open. Either :attr:`ip` or",
            ":attr:`serial` must be provided.",
            ""
        ]
    },
    "cplcom.player.Player": {
        "cls": [
            "(internal) The string associated with the player source used.",
            "",
            "It is one of ``FFMpeg``, ``RTV``, or ``PTGray`` indicating the camera",
            "being used.",
            ""
        ],
        "metadata_play": [
            "(internal) Describes the video metadata of the video player.",
            "    ",
            ""
        ],
        "metadata_play_used": [
            "(internal) Describes the video metadata of the video player that is",
            "actually used by the player.",
            ""
        ],
        "metadata_record": [
            "(internal) Describes the video metadata of the video recorder.",
            "    ",
            ""
        ],
        "record_directory": [
            "The directory into which videos should be saved.",
            "    ",
            ""
        ],
        "record_fname": [
            "The filename to be used to record the next video.",
            "",
            "If ``{}`` is present in the filename, it'll be replaced with the value of",
            ":attr:`record_fname_count` which auto increments after every video, when",
            "used.",
            ""
        ],
        "record_fname_count": [
            "A counter that auto increments by one after every recorded video.",
            "",
            "Used to give unique filenames for each video file.",
            ""
        ]
    },
    "cplcom.player.RTVPlayer": {
        "cls": [],
        "metadata_play": [],
        "metadata_play_used": [],
        "metadata_record": [],
        "pipe_name": [
            "The internal name used to communicate with Barst. When running remotely,",
            "the name is used to discover Barst.",
            ""
        ],
        "port": [
            "The RTV port on the card to use.",
            "    ",
            ""
        ],
        "record_directory": [],
        "record_fname": [],
        "record_fname_count": [],
        "remote_computer_name": [
            "The name of the computer running Barst, if it's a remote computer.",
            "Otherwise it's the empty string.",
            ""
        ],
        "video_fmt": [
            "The video format of the video being played.",
            "",
            "It can be one of the keys in::",
            "",
            "    {'full_NTSC': (640, 480), 'full_PAL': (768, 576),",
            "    'CIF_NTSC': (320, 240), 'CIF_PAL': (384, 288),",
            "    'QCIF_NTSC': (160, 120), 'QCIF_PAL': (192, 144)}",
            ""
        ]
    }
}