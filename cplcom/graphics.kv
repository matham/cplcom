#@PydevCodeAnalysisIgnore
#:import expanduser os.path.expanduser

<CallbackPopup@KNSpaceBehavior+DragBehavior+Popup>:
    size_hint: (None, None)
    size: (min(self.parent.width, 800), min(self.parent.height, 600)) if self.parent else (100, 100)

<PopupBrowser@CallbackPopup>:
    target: expanduser('~')
    dirselect: False
    multiselect: False
    callback: None
    FileBrowser:
        id: file_browser
        dirselect: root.dirselect
        multiselect: root.multiselect
        path: root.target or expanduser('~')
        on_success:
            if root.callback: root.callback(self.path, self.selection, self.filename)
            if self.selection or self.filename: root.dismiss()
        on_submit:
            if root.callback: root.callback(self.path, self.selection, self.filename)
            root.dismiss()
        on_cancel_state: root.dismiss()


<ErrorLabel@BoxLayout>:
    size_hint_y: None
    height: label.texture_size[1]
    text: ''
    level: 'error'
    Label:
        id: label
        text_size: self.width, None
        padding: '5dp', '5dp'
        text: root.text
        canvas.before:
            Color:
                rgba: .2, .2, .2, 1
            Rectangle:
                size: self.texture_size
                pos: self.pos
    ImageButton:
        size_hint: None, None
        width: min(60, label.height)
        height: min(60, label.height)
        source: '{}.png'.format(root.level)

<ErrorLog@CallbackPopup>:
    container: container
    BoxLayout:
        orientation: 'vertical'
        padding: '15dp', '15dp'
        spacing: '10dp', '10dp'
        RecycleView:
            id: container
            bar_width: '15dp'
            viewclass: 'ErrorLabel'
            RecycleBoxLayout:
                orientation: 'vertical'
                padding: '15dp'
                spacing: '4dp'
                size_hint_y: None
                height: self.minimum_height
                default_size_hint: (1, None)
                initial_size: (5, 50)
                default_size: (5, None)
        FloatLayout:
            size_hint_y: None
            height: close.texture_size[1]
            Button:
                id: close
                text: 'Close'
                on_release: root.dismiss()
                padding: '20dp', '10dp'
                width: self.texture_size[0]
                size_hint_x: None
                pos_hint: {'right': 1}
                y: self.parent.y

<ErrorIndicator>:
    on_release:
        self._anim.cancel(self)
        self._alpha = 1
        self._level = 'ok'
        self._display.open()
    down: '{}_down.png'.format(self._level)
    normal: '{}.png'.format(self._level)
    canvas:
        Color:
            rgb: 1, 1, 1
            a: self._alpha
        Rectangle:
            pos: self.pos
            size: self.size
            source: self.down if self.state == 'down' else self.normal


<ImageButton@KNSpaceBehavior+ButtonBehavior+Image>
<ImageToggleButton@KNSpaceBehavior+ToggleButtonBehavior+Image>

<SizedTextInput@TextInput>:
    size_hint_y: None
    height: self.minimum_height
    multiline: False
    write_tab: False

<KNSizedTextInput@KNSpaceBehavior+SizedTextInput>
<KNButton@KNSpaceBehavior+Button>
<KNToggleButton@KNSpaceBehavior+ToggleButton>
<KNSpinner@KNSpaceBehavior+Spinner>

# a icon widget with a label
<LabeledIcon@KNSpaceBehavior+Widget>:
    size_hint: None, None
    size: max(self.icon_size[0], self.max_width), self.icon_size[1] + self.text_height
    max_width: 50
    text_height: 62
    background_down: 'green-led-on-th.png'
    background_normal: 'green-led-off-th.png'
    icon_size: 38, 38
    halign: 'center'
    text: ''
    canvas:
        Color:
            rgb: (1, 1, 1)
            a: .5 if self.disabled else 1
        Rectangle:
            size: root.icon_size
            pos: self.x + self.width / 2. - self.icon_size[0] / 2., min(self.top - self.icon_size[1], self.y + root.text_height + 10)
            source: self.background_normal if self.state == 'normal' else self.background_down
    Label:
        pos: root.pos
        text: root.text
        markup: True
        size: root.width, root.text_height
        text_size: self.size
        valign: 'top'
        halign: root.halign
        strip: True
        font_size: '11dp'

<DarkButton>


# various button/switch widgets
<SwitchIcon@ToggleButtonBehavior+LabeledIcon>
<PressIcon@ButtonBehavior+LabeledIcon>
<DarkSwitchIcon@SwitchIcon>:
    canvas.before:
        Color:
            rgba: [0.5, 0.5, 0.5, 0.08]
        Rectangle:
            size: self.size
            pos: self.pos
<DarkPressIcon@PressIcon>:
    canvas.before:
        Color:
            rgba: [0.5, 0.5, 0.5, 0.08]
        Rectangle:
            size: self.size
            pos: self.pos

<TimeLineSlice>:
    _scale: self.width / (self.duration if self.duration else 2000)
    bar_height: 20
    canvas:
        Color:
            rgba: self.color[0] if self.color is not None else self._color[0]
        Rectangle:
            pos: self.x, self.center[1] - self.bar_height / 2.0
            size: min(self.width, self.elapsed_t * self._scale), self.bar_height
        Color:
            rgba: self.color[1] if self.color is not None else self._color[1]
        Rectangle:
            pos: self.x + min(self.width, self.elapsed_t * self._scale), self.center[1] - self.bar_height / 2.0
            size: max(0, self.width - (min(self.width, self.elapsed_t * self._scale))), self.bar_height
    Label:
        x: root.x
        y: root.top - self.height
        size: root.width, (root.height - root.bar_height ) / 2.
        text_size: self.size
        text: str.format(root.text, root.duration if root.duration else '') if root.size[0] else ''
        shorten: True
        halign: 'center'
        valign: 'middle'


<TimeLine>:
    size_hint_y: None
    height: 80
    box: box
    canvas:
        Color:
            rgba: 1, 1, 1, 1
    GridLayout:
        cols: 1
        width: 125
        size_hint: None, None
        size: max(max(timer.texture_size[0], state.texture_size[0]), self.width), root.height
        pos: root.pos
        Label:
            id: state
            markup: True
            bold: True
            font_size: '22sp'
            color: .1, .9, .1
            text: root.slices[root.current_slice].text if root.current_slice is not None and root.current_slice < len(root.slices) else root.text
        Label:
            id: timer
            markup: True
            bold: True
            font_size: '22sp'
            color: .9, .1, .1
            text: root.timer
    BoxLayout:
        id: box

<BufferImage>:
    canvas:
        Rectangle:
            size: root.texture_size
            texture: root.img_texture
