#@PydevCodeAnalysisIgnore


# a icon widget with a label
<LabeledIcon>:
    size_hint: None, None
    size: max(self.icon_size[0], self.max_width), self.icon_size[1] + self.text_height
    max_width: 50
    text_height: 62
    background_down: 'green-led-on-th.png'
    background_normal: 'green-led-off-th.png'
    icon_size: 38, 38
    halign: 'center'
    canvas:
        Color:
            rgb: (1, 1, 1)
            a: .5 if self.disabled else 1
        Rectangle:
            size: root.icon_size
            pos: self.x + self.width / 2. - self.icon_size[0] / 2., min(self.top - self.icon_size[1], self.y + root.text_height + 10)
            source: self.background_normal if self.state == 'normal' else self.background_down
    Label:
        pos: root.pos
        text: root.text
        markup: True
        size: root.width, root.text_height
        text_size: self.size
        valign: 'top'
        halign: root.halign
        strip: True
        font_size: '11dp'


<FFImage>:
    size_hint: None, None
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            texture: self._texture
            pos: self.pos
            size: self.size


<TimeLineSlice>:
    color: (self.color_odd if self.parent.children.index(self) % 2 else self.color_even) if self.parent and self in self.parent.children else (1, 1, 1, 1)
    pos: (self.parent.offset + self.start_t * self.parent.scale, self.parent.y) if self.parent else (0, 0)
    size: ((self.end_t - self.start_t) * self.parent.scale, self.parent.height) if self.parent else (0, 0)
    bar_height: 20
    canvas:
        Color:
            rgb: self.color
            a: 1.
        Rectangle:
            pos: (self.x, self.center[1] - self.bar_height / 2.0) if self.parent else (0, 0)
            size: (min(self.width, self.elapsed_t * self.parent.scale), self.bar_height) if self.parent else (0, 0)
        Color:
            rgba: .5, .0, .0, 1
        Color:
            rgb: self.color
            a: .3
        Rectangle:
            pos: (min(self.right, self.parent.offset + (self.start_t + self.elapsed_t) * self.parent.scale), self.center[1] - self.bar_height / 2.0) if self.parent else (0, 0)
            size: (max(0, (self.end_t - self.elapsed_t - self.start_t) * self.parent.scale), self.bar_height) if self.parent else (0, 0)
    Label:
        x: (max(root.parent.offset, root.center[0] - self.width / 2.)) if root.parent else 0
        y: (root.parent.y if root.parent.children.index(root) % 2 else root.top - self.height) if root.parent and root in root.parent.children else 0
        size: self.texture_size
        text: root.text if root.size[0] else ''


<TimeLine>:
    size_hint_y: None
    height: 80
    offset: self.x + timer.width + 20
    scale: (self.right - self.offset) / self.range
    canvas:
        Color:
            rgba: 1, 1, 1, 1
    GridLayout:
        cols: 1
        width: 100
        size: max(max(timer.texture_size[0], state.texture_size[0]), self.width), root.height
        pos: root.pos
        Label:
            id: state
            markup: True
            bold: True
            font_size: '22sp'
            color: .1, .9, .1
            text: root.text
        Label:
            id: timer
            markup: True
            bold: True
            font_size: '22sp'
            color: .9, .1, .1
            text: root.timer



<ErrorPopup>:
    title: 'Message'
    size_hint: None, None
    height: min(self.parent.height if self.parent else 0, 600)
    width: min(self.parent.width if self.parent else 0, 800)
    ScrollView:
        scroll_type: ['bars']
        bar_width: 10
        Label:
            size_hint_y: None
            height: self.texture_size[1]
            text_size: self.width, None
            text: app.exception_value
