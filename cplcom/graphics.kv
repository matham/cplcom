#@PydevCodeAnalysisIgnore


# a icon widget with a label
<LabeledIcon>:
    size_hint: None, None
    size: max(self.icon_size[0], self.max_width), self.icon_size[1] + self.text_height
    max_width: 50
    text_height: 62
    background_down: 'green-led-on-th.png'
    background_normal: 'green-led-off-th.png'
    icon_size: 38, 38
    halign: 'center'
    canvas:
        Color:
            rgb: (1, 1, 1)
            a: .5 if self.disabled else 1
        Rectangle:
            size: root.icon_size
            pos: self.x + self.width / 2. - self.icon_size[0] / 2., min(self.top - self.icon_size[1], self.y + root.text_height + 10)
            source: self.background_normal if self.state == 'normal' else self.background_down
    Label:
        pos: root.pos
        text: root.text
        markup: True
        size: root.width, root.text_height
        text_size: self.size
        valign: 'top'
        halign: root.halign
        strip: True
        font_size: '11dp'


# various button/switch widgets
<SwitchIcon@ToggleButtonBehavior+LabeledIcon>
<PressIcon@ButtonBehavior+LabeledIcon>

<ToggleDevice@SwitchIcon>:
    dev_disabled: False
    disabled: app.app_state == 'clear' or app.app_state == 'exception' or self.dev_disabled
    text_height: 50
    halign: 'center'

<DarkDevice@ToggleDevice>
    canvas.before:
        Color:
            rgba: [0.5, 0.5, 0.5, 0.08]
        Rectangle:
            size: self.size
            pos: self.pos


<FFImage>:
    size_hint: None, None
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            texture: self._texture
            pos: self.pos
            size: self.size


<TimeLineSlice>:
    scale: (self.width / self.duration) if self.duration else 10000
    bar_height: 20
    canvas:
        Color:
            rgba: self.color[0] if self.color is not None else self._color[0]
        Rectangle:
            pos: self.x, self.center[1] - self.bar_height / 2.0
            size: min(self.width, self.elapsed_t * self.scale), self.bar_height
        Color:
            rgba: self.color[1] if self.color is not None else self._color[1]
        Rectangle:
            pos: self.x + min(self.width, self.elapsed_t * self.scale), self.center[1] - self.bar_height / 2.0
            size: max(0, self.width - (min(self.width, self.elapsed_t * self.scale))), self.bar_height
    Label:
        x: root.x
        y: root.top - self.height
        size: root.width, (root.height - root.bar_height ) / 2.
        text_size: self.size
        text: root.text.format(root.duration if root.duration else '') if root.size[0] else ''
        shorten: True
        halign: 'center'
        valign: 'middle'


<TimeLine>:
    size_hint_y: None
    height: 80
    box: box
    canvas:
        Color:
            rgba: 1, 1, 1, 1
    GridLayout:
        cols: 1
        width: 125
        size_hint: None, None
        size: max(max(timer.texture_size[0], state.texture_size[0]), self.width), root.height
        pos: root.pos
        Label:
            id: state
            markup: True
            bold: True
            font_size: '22sp'
            color: .1, .9, .1
            text: root.slice_names[root.current_slice] if root.current_slice is not None and root.current_slice < len(root.slice_names) else root.text
        Label:
            id: timer
            markup: True
            bold: True
            font_size: '22sp'
            color: .9, .1, .1
            text: root.timer
    BoxLayout:
        id: box



<ErrorPopup>:
    title: 'Message'
    size_hint: None, None
    height: min(self.parent.height if self.parent else 0, 600)
    width: min(self.parent.width if self.parent else 0, 800)
    ScrollView:
        scroll_type: ['bars']
        bar_width: 10
        Label:
            size_hint_y: None
            height: self.texture_size[1]
            text_size: self.width, None
            text: app.exception_value


# controls for starting/stopping the experiment
<StartingExperiment@GridLayout>:
    cols: 1
    size_hint: None, None
    height: self.minimum_height
    width: 200
    padding: [5]
    spacing: [5]
    TextInput:
        height: 2 * self.line_height + 5
        size_hint_y: None
        text: app.exp_config_path
        on_text: app.exp_config_path = self.text
    GridLayout:
        rows: 1
        size_hint_y: None
        height: 50
        spacing: [5]
        Button:
            text: 'Start'
            on_press: app.start_stage()
            disabled: app.app_state != 'clear'
        Button:
            text: 'Recover'
            on_press: app.start_stage(True)
            disabled: app.app_state != 'clear'

<ExperimentControl@GridLayout>:
    size_hint: None, None
    size: self.minimum_size
    rows: 1
    spacing: [20, 0]
    Label:
        size_hint_x: None
        width: self.height if self.warn_text else 0
        on_touch_down: app.exception_value and self.collide_point(*args[1].pos) and (app.popup_anim.cancel(self) or setattr(self, 'warn_alpha', int(bool(app.exception_value))) or app.err_popup.open())
        warn_alpha: 0.
        warn_text: app.exception_value
        on_warn_text:
            if self.warn_text and app.popup_anim: app.popup_anim.start(self)
            else: setattr(self, 'warn_alpha', 0)
        canvas:
            Color:
                rgb: 1, 1, 1
                a: self.warn_alpha
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'Remove_1.png'
    StartingExperiment
    Widget:
        size_hint: None, None
        size: switch.size
        SwitchIcon:
            pos: self.parent.pos
            id: switch
            size_hint: None, None
            text: 'Pause' if self.state == 'normal' else 'Continue'
            max_width: 0
            text_height: 30
            background_down: 'play.png'
            background_normal: 'pause.png'
            icon_size: 48, 48
            on_press:
                app.base_stage is not None and (app.base_stage.unpause() if self.state == 'normal' else app.base_stage.pause())
                app.app_state =  'running' if self.state == 'normal' else 'paused'
            disabled: app.app_state != 'running' and app.app_state != 'paused'
    Widget:
        size_hint: None, None
        size: press.size
        PressIcon:
            pos: self.parent.pos
            id: press
            text: 'Stop'
            max_width: 0
            text_height: 30
            background_down: 'stop_0.png'
            background_normal: 'stop_1.png'
            icon_size: 48, 48
            on_press: app.base_stage and app.base_stage.stop()
            disabled: app.app_state != 'running'
